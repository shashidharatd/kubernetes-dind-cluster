etcd:
  hostname: etcd
  image: gcr.io/google_containers/etcd:3.0.17
  ports:
    - "${ETCD_PORT}:${ETCD_PORT}"
  command: >
    /usr/local/bin/etcd
    --listen-client-urls 'http://etcd:${ETCD_PORT}'
    --advertise-client-urls 'http://etcd:${ETCD_PORT}'
    --initial-cluster-state new
node:
  hostname: node
  privileged: true
  image: k8s.io/kubernetes-dind
  ports:
    - "10248"
    - "10249"
  entrypoint:
  - bash
  - -xc
  - >
    NAME=$$(cut -f2 -d/ <<<$${APISERVER_1_NAME}) &&
    N=$${NAME##*_} &&
    hostname $$(echo $${NAME} | tr _ -) &&
    HOSTNAME_OVERRIDE=$$(getent hosts node | cut -d' ' -f1 | sort -u | tail -1) &&
    DOCKER_NETWORK_OFFSET=0.0.$${N}.0
    exec wrapdocker bash -c "
    hyperkube kubelet
    --hostname-override=$${HOSTNAME_OVERRIDE}
    --node-labels="rack=$${N},gen=201$${N},failure-domain.beta.kubernetes.io/region=${CLUSTER_REGION},failure-domain.beta.kubernetes.io/zone=${CLUSTER_ZONE}"
    --kubeconfig=/var/lib/config/master-kubeconfig.yaml
    --allow-privileged
    --cluster-dns=${DNS_SERVER_IP}
    --cluster-domain=${DNS_DOMAIN}
    --pod-manifest-path=/var/lib/kubelet/manifests
    --v=5 2>&1 | sed 's/^/kubelet: /' 1>&2 &
    hyperkube proxy
    --hostname-override=$${HOSTNAME_OVERRIDE}
    --master=http://apiserver:${APISERVER_INSECURE_PORT}
    --cluster-cidr=\$$(ip addr show docker0 | grep -w inet | awk '{ print \$$2; }')
    --masquerade-all
    --conntrack-max=0
    --conntrack-max-per-core=0
    --v=4 2>&1 | sed 's/^/proxy:   /' 1>&2 &
    wait \$$(jobs -p)
    "
  command: []
  environment:
  - VAR_LIB_DOCKER_SIZE=10
  - DOCKER_DAEMON_ARGS
  volumes:
  - ${DOCKER_IN_DOCKER_STORAGE_DIR}:/var/lib/docker
  - /sys/fs/cgroup:/sys/fs/cgroup
  - ${DOCKER_IN_DOCKER_CONFIG_DIR}:/var/lib/config
  links:
  - apiserver
apiserver:
  hostname: apiserver
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-cxeu"
  - >
    echo "Hostname: $$(hostname -f) ($$(hostname -f | xargs resolveip.sh))" &&
    hyperkube apiserver
    --insecure-bind-address=$$(resolveip.sh apiserver)
    --external-hostname=apiserver
    --etcd-servers=http://etcd:${ETCD_PORT}
    --insecure-port=${APISERVER_INSECURE_PORT}
    --secure-port=${APISERVER_PORT}
    --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,PersistentVolumeLabel
    --authorization-mode=RBAC,AlwaysAllow
    --token-auth-file=/var/run/kubernetes/auth/token-users
    --basic-auth-file=/var/run/kubernetes/auth/basic-users
    --service-account-key-file=/var/run/kubernetes/auth/service-accounts-key.pem
    --service-cluster-ip-range=${SERVICE_CIDR}
    --service-node-port-range=30000-32767
    --allow-privileged
    --tls-cert-file=/var/run/kubernetes/auth/apiserver-bundle.pem
    --tls-private-key-file=/var/run/kubernetes/auth/apiserver-key.pem
    --runtime-config=api/all
    --v=4
  ports:
    - "${APISERVER_INSECURE_PORT}:${APISERVER_INSECURE_PORT}"
    - "${APISERVER_PORT}:${APISERVER_PORT}"
  volumes:
  - ${DOCKER_IN_DOCKER_WORK_DIR}/auth:/var/run/kubernetes/auth:ro
  links:
  - etcd
controller:
  hostname: controller
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-ceu"
  - >
    hyperkube controller-manager
    --address=$$(resolveip.sh controller)
    --master=http://apiserver:${APISERVER_INSECURE_PORT}
    --service-account-private-key-file=/var/run/kubernetes/auth/service-accounts-key.pem
    --root-ca-file=/var/run/kubernetes/auth/ca.pem
    --v=4
  volumes:
  - ${DOCKER_IN_DOCKER_WORK_DIR}/auth:/var/run/kubernetes/auth:ro
  links:
  - apiserver
scheduler:
  hostname: scheduler
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-ceu"
  - >
    hyperkube scheduler
    --address=$$(resolveip.sh scheduler)
    --master=http://apiserver:${APISERVER_INSECURE_PORT}
    --v=4
  links:
  - apiserver
